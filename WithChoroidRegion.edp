load "iovtk"

string RootResults  = "./Results/";
string RootPreProc  = "./Pre-processing/";
string RootPostProc = "./Post-processing/";
string RootParams   = "./Params/";

exec("mkdir " + RootResults);

// Import mesh
int RPE = 0, PH = 1, ONL = 2, OPL = 3, INL = 4, IPL = 5, GCL = 6, CC = 7;  // Regions' label 
int choroid = 0, lateral = 1, vitreous = 2, inner = 3, bruchs = 4; // Borders' label

mesh Th;
string MeshFile = RootPreProc + "WithChoroid.msh";

try
  {
    Th = readmesh(MeshFile);
  }
catch(...)
  {
    cout << "\nMesh file '" << MeshFile << "' not found." << endl;
    cout << "The mesh needs to be created first -> 'FreeFem++ Pre-processing/MeshWithChoroid.edp'\n" << endl;
  }

//////// Read parameters from file

// Boundary conditions
real pvit, pch; 		 // PO2 (mmHg) at the vitreous and choroid, respectively

// Oxygen related parameters
real alpha, D;		         // Oxygen solubility in tissue (ml_O2.ml-1.mmHg-1) and diffusivity (cm2.s-1
real K12;               	 // PO2 at half maximum consumption (mmHg)

{
  func ifstream skipcomment(ifstream &ff)
  {
    while(1)
      {
	int where = ff.tellg(); // store file position
	string comment;
	ff >> comment;
	if ( ! ff.good() ) break;
	if( comment(0:0)=="#") {
	  getline(ff,comment);
	  // cout << " -- #" << comment << endl;
	}
	else {
	  ff.seekg(where); // restore file position
	  break;
	}
      }
    return ff;
  }
  
  ifstream ff(RootParams + "OxygenConstants.dat");
  skipcomment(ff);
  ff >> alpha;
  skipcomment(ff);
  ff >> D;
  skipcomment(ff);
  ff >> K12;

  ifstream ffBC(RootParams + "BoundaryConditions.dat");
  skipcomment(ffBC);
  ffBC >> pch;
  skipcomment(ffBC);
  ffBC >> pvit;
}

////// Macros definition
macro grad(f) ([dx(f), dy(f)]) // EOM




////// Variationnal formulation and solver
fespace Vh(Th, P1);
Vh p,v, phi; // phi test function, p the unknown, v the past iteration in the fixed point method
Vh Qmax, S;  // Qmax the piecewise constant consumption rate, S the piecewise constant oxygen perfusion rate

// Read the dof values from files
{
  ifstream ffQmax(RootPreProc + "Qmax.dat");
  ifstream ffS(RootPreProc + "S.dat");
  
  for (int k = 0; k < Qmax.n; k++)
    {
      ffQmax >> Qmax[][k];
      ffS    >> S[][k];
    }
}


// Variational problem
problem RetinalOxygen(p, phi) =
  // In the retina
  int2d(Th,RPE, PH, ONL, OPL, INL, IPL, GCL)   (D*alpha*grad(p)'*grad(phi))
  + int2d(Th, RPE, PH, ONL, OPL, INL, IPL, GCL) (alpha*Qmax/(v+K12)*p*phi)
  - int2d(Th, RPE, PH, ONL, OPL, INL, IPL, GCL) (S*phi)

  // In the choriocapillaris
  + int2d(Th, CC) (D*alpha*grad(p)'*grad(phi))
  - int2d(Th, CC) (5e-5*phi)
  
  + on(choroid, p = pch)
  + on(2, p = pvit)
  ;


// Fixed point iteration loop
v = 1.0;			// To initiate the loop
RetinalOxygen;
v = p;

int i = 0, maxiter = 50;
real tol = 1e-4;
real L2norm  = int2d(Th)(p^2)^.5;
real L2error = int2d(Th)( (p-v)^2 )^.5/L2norm; 
real[int] convergence(maxiter);

while (i<maxiter)
  {
    RetinalOxygen;
    
    L2norm  = int2d(Th)(p^2)^.5;
    L2error = int2d(Th)( (p-v)^2 )^.5/L2norm;
    convergence[i] = L2error;
    cout << "Iteration " << i << "\tL2 error = " << L2error << endl;
    
    if (L2error < tol)
      break;
    v = p;
    i++;
  }




///// Save results to vtk and create PO2 profiles png 

savevtk(RootResults + "RetinalPO2.vtk", Th, p,S,Qmax, dataname="PO2 Source Qmax");

{
  ofstream ff(RootResults + "Convergence.dat");
  for (int k = 0; k < i+1; k++)
    ff << convergence[k]/convergence[0] << endl;
}

string ProfilesFilename = "PO2_Profiles.dat";
{
  ofstream ff(RootResults + ProfilesFilename);
  real[int] xlocs = [50e-4, 750e-4, 1100e-4, 1500e-4]; // In microns
  int K = 1000;       // Number of points along the depth axis
  real h = 335e-4/K;
  real[int] ylocs = -10e-4:h:0.335;

  for (int k = 0; k < K; k++)
    {
      ff << ylocs[k] << " " << p(xlocs[0], ylocs[k]) << " "  << p(xlocs[1], ylocs[k]) << " " << p(xlocs[2], ylocs[k]) << " " << p(xlocs[3], ylocs[k]) << " " << endl;
    }
}  

exec("gnuplot -c " + RootPostProc + "PlotProfiles.gp " + RoootResults + " " + ProfilesFilename);