# This code generates the network.dat file used in the Green's function method
# by Secomb from the capillary network generated by Wahbi

import os
import csv
import numpy as np

# For the normal case

size = 375
folder = list(range(1,11))
scale = []

# Parameters
number = 25   # Number of tissue points
outer_bd = 100   # Outer bound distance
max_segment_length = 100   # Maximum segment length
nodsegm_max = 5   # nodsegm, max. allowed number of segments per node
hem = 0.45   # Hematocrit, agree with Wahbi's perfusion simulation

# scale_perfusion = 100.0   #(mL/100g/min)
scale_perfusion = 100.0   #(mL/100mL/min)
# oxygen_bc = 40.0   #(mmHg)
oxygen_bc = 43.2   #(mmHg)

for n in range(len(folder)):
	path = '/Users/xueyidan/Desktop/Capillary_Wahbi/'+str(size)+'_micron/Ran_'+str(folder[n])+'/Results'
	os.chdir(path)

	# Import voxel size
	dimensions = np.genfromtxt('Dimension.txt', delimiter='	')
	N = int(dimensions[0])   # Number of nodes
	L = dimensions[3]   # In metres
	L = L*1e6   # Voxel size in microns

	# Import node coordinates
	coordinates = np.genfromtxt('Node_co-ordinates.txt', delimiter='	', skip_header=1)
	X = coordinates[:, 1]   # In metre
	Y = coordinates[:, 2]   # In metre
	Z = coordinates[:, 3]   # In metre

	X = X*1e6   # In microns
	Y = Y*1e6   # In microns
	Z = Z*1e6   # In microns

	# Import flow and radius
	flow = np.genfromtxt('Flow_matrix.txt', delimiter='	')
	radius = np.genfromtxt('Radius_matrix.txt', delimiter='	', skip_header=1)

	# Segments
	From = []
	To = []
	diam = []
	rel_flow = []
	for i in range(N):
		for j in range(N):
			if flow[i][j] != 0:
				# Delete the very low flow segment (often caused by the error of the numerical scheme)
				if flow[i][j] < 1e-27:   
					flow[i][j] = 0
				else:					
					From.append(i)
					To.append(j)
					diam.append(radius[i][j]*2*1e6)   # Unit in microns
					rel_flow.append(flow[i][j]*1e12*60)   # Change unit to nanoliters/minute

	segm_total = len(diam)

	# Find the boundary nodes and calculate inlet flow
	inlet_nodes = []
	outlet_nodes = []
	total_inlet_flow = 0   # units in meters^3/second
	for i in range(N):
		if X[i] == 0 or Y[i] == 0 or Z[i] == 0 or X[i] == L or Y[i] == L or Z[i] == L:
			if i in From:
				if i not in To:
					inlet_nodes.append(i)
					for j in range(N):
						if flow[i][j] != 0:
							total_inlet_flow = total_inlet_flow + flow[i][j]
			if i in To:
				if i not in From:
					outlet_nodes.append(i)
	total_bound = len(inlet_nodes) + len(outlet_nodes)
	relative_flow_rate = total_inlet_flow/((L*1e-6)**3)

	# Scale the perfusion to 100 (ml/100g/min)
	# perfusion = relative_flow_rate*6000/1.05   # units in ml/100g/min
	perfusion = relative_flow_rate*6000   # units in mL/100mL/min
	scaling_ratio = scale_perfusion/perfusion
	scale.append(scaling_ratio)
	for i in range(segm_total):
		rel_flow[i] = rel_flow[i]*scaling_ratio	

	# File write
	os.chdir('/Users/xueyidan/Desktop/network_inputs')
	file = open('network_'+str(size)+'_'+str(folder[n])+'.dat','w')
	# file = open('network_'+str(size)+'_'+str(folder[n])+'_50mmHg.dat','w')	

	# information
	file.write('Brain network by Wahbi\n')
	file.write(str(L) + '	' + str(L) + '	' + str(L) + '	box dimensions in microns\n')
	file.write(str(number) + '	' + str(number) + '	' + str(number) + '	number of tissue points in x,y,z directions\n')
	file.write(str(outer_bd) + '.	outer bound distance\n')
	file.write(str(max_segment_length) + '.	max. segment length\n')
	file.write(str(nodsegm_max) + '	nodsegm, max. allowed number of segments per node\n')
	file.write(str(segm_total) + '	total number of segments\n')

	# segments
	file.write('name	type	from	to	diam.	rel. flow	hem.\n')
	for i in range(segm_total):
		file.write(str(i+1)+'	')
		file.write('5	')
		file.write(str(From[i]+1)+'	')
		file.write(str(To[i]+1)+'	')
		file.write(str(diam[i])+'	')
		file.write(str(rel_flow[i])+'	')
		file.write(str(hem)+'\n')	

	# nodes
	file.write(str(N)+'	total number of nodes\n')
	file.write('name	x	y	z\n')
	for i in range(N):
		file.write(str(i+1)+'	')
		file.write(str(X[i])+'	')
		file.write(str(Y[i])+'	')
		file.write(str(Z[i])+'\n')

	# boundary nodes
	# assume bctyp=2,press/flow=2,HD=0.45
	file.write(str(len(inlet_nodes))+' total number of boundary nodes\n')
	file.write('node bctyp press/flow   HD    PO2    solute 3\n')
	for i in range(len(inlet_nodes)):
		file.write(str(inlet_nodes[i]+1)+'	')
		file.write('2	')
		file.write('2.0	')
		file.write('0.45	')   # haematocrit of 0.45
		file.write(str(oxygen_bc)+'	')
		file.write('1.\n')
	file.close()

# For calculating flows
file = open('perfusion_scale_'+str(size)+'.csv','w')
for i in range(len(folder)):
	file.write(str(scale[i])+'\n')
file.close()



# For network with blocking vessels

# For the first cube in 375-micron with PO2=40mmHg
# CBF_scale = 0.9217025386309966   # scale to 55 mL/100g/min
# for a in range(1,21):
# 	for b in range(1,6):
# 		folder = '1_'+str(a)+'_'+str(b)
# 		path = '/Users/xueyidan/Desktop/Ran_occlusion/Ran_'+folder+'/Results'
# 		os.chdir(path)

# 		# Import voxel size
# 		dimensions = np.genfromtxt('Dimension.txt', delimiter='	')
# 		N = int(dimensions[0])   # Number of nodes
# 		L = dimensions[3]   # In metres
# 		L = L*1e6   # Voxel size in microns

# 		# Import node coordinates
# 		coordinates = np.genfromtxt('Node_co-ordinates.txt', delimiter='	', skip_header=1)
# 		X = coordinates[:, 1]   # In metre
# 		Y = coordinates[:, 2]   # In metre
# 		Z = coordinates[:, 3]   # In metre

# 		X = X*1e6   # In microns
# 		Y = Y*1e6   # In microns
# 		Z = Z*1e6   # In microns

# 		# Import flow and radius
# 		flow = np.genfromtxt('Flow_matrix.txt', delimiter='	')
# 		radius = np.genfromtxt('Radius_matrix.txt', delimiter='	', skip_header=1)

# 		# Segments
# 		From = []
# 		To = []
# 		diam = []
# 		rel_flow = []
# 		for i in range(N):
# 			for j in range(N):
# 				if flow[i][j] != 0:
# 					# Delete the very low flow segment (often caused by the error of the numerical scheme)
# 					if flow[i][j] < 1e-27:   
# 						flow[i][j] = 0
# 					else:
# 						From.append(i)
# 						To.append(j)
# 						diam.append(radius[i][j]*2*1e6)   # Unit in microns
# 						rel_flow.append(flow[i][j]*1e12*60*CBF_scale)   # Change unit to nanoliters/minute, scale the CBF

# 		segm_total = len(diam)

# 		# Find the boundary nodes and calculate inlet flow
# 		inlet_nodes = []
# 		outlet_nodes = []
# 		total_inlet_flow = 0   # units in meters^3/second
# 		for i in range(N):
# 			if X[i] == 0 or Y[i] == 0 or Z[i] == 0 or X[i] == L or Y[i] == L or Z[i] == L:
# 				if i in From:
# 					if i not in To:
# 						inlet_nodes.append(i)
# 						for j in range(N):
# 							if flow[i][j] != 0:
# 								total_inlet_flow = total_inlet_flow + flow[i][j]*CBF_scale
# 				if i in To:
# 					if i not in From:
# 						outlet_nodes.append(i)
# 		total_bound = len(inlet_nodes) + len(outlet_nodes)
# 		relative_flow_rate = total_inlet_flow/((L*1e-6)**3)
# 		perfusion = relative_flow_rate*6000/1.05

# 		# Other parameters
# 		number = 25   # Number of tissue points
# 		outer_bd = 100   # Outer bound distance
# 		max_segment_length = 100   # Maximum segment length
# 		nodsegm_max = 5   # nodsegm, max. allowed number of segments per node
# 		hem = 0.45   # Hematocrit, agree with Wahbi's perfusion simulation


# 		# File write
# 		os.chdir('/Users/xueyidan/Desktop/network_inputs/block')
# 		file = open('network_'+folder+'.dat','w')

# 		# information
# 		file.write('Brain network by Wahbi\n')
# 		file.write(str(L) + '	' + str(L) + '	' + str(L) + '	box dimensions in microns\n')
# 		file.write(str(number) + '	' + str(number) + '	' + str(number) + '	number of tissue points in x,y,z directions\n')
# 		file.write(str(outer_bd) + '.	outer bound distance\n')
# 		file.write(str(max_segment_length) + '.	max. segment length\n')
# 		file.write(str(nodsegm_max) + '	nodsegm, max. allowed number of segments per node\n')
# 		file.write(str(segm_total) + '	total number of segments\n')

# 		# segments
# 		file.write('name	type	from	to	diam.	rel. flow	hem.\n')
# 		for i in range(segm_total):
# 			file.write(str(i+1)+'	')
# 			file.write('5	')
# 			file.write(str(From[i]+1)+'	')
# 			file.write(str(To[i]+1)+'	')
# 			file.write(str(diam[i])+'	')
# 			file.write(str(rel_flow[i])+'	')
# 			file.write(str(hem)+'\n')	

# 		# nodes
# 		file.write(str(N)+'	total number of nodes\n')
# 		file.write('name	x	y	z\n')
# 		for i in range(N):
# 			file.write(str(i+1)+'	')
# 			file.write(str(X[i])+'	')
# 			file.write(str(Y[i])+'	')
# 			file.write(str(Z[i])+'\n')

# 		# boundary nodes
# 		# assume bctyp=2,press/flow=2,HD=0.42
# 		file.write(str(len(inlet_nodes))+' total number of boundary nodes\n')
# 		file.write('node bctyp press/flow   HD    PO2    solute 3\n')
# 		for i in range(len(inlet_nodes)):
# 			file.write(str(inlet_nodes[i]+1)+'	')
# 			file.write('2	')
# 			file.write('2.0	')
# 			file.write('0.45	')   # haematocrit of 0.45
# 			file.write('40.	')
# 			file.write('1.\n')
# 		file.close()

# 		os.chdir('/Users/xueyidan/Desktop')
# 		file = open('perfusion_block.csv','a')
# 		file.write(str(a)+'	'+str(b)+'	'+str(perfusion)+'\n')



